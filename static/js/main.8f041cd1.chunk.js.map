{"version":3,"sources":["logo.svg","Component/SignIn.js","App.js","reportWebVitals.js","index.js"],"names":["theme","createTheme","STATE_MACHINE_NAME","SignIn","checkLogin","useState","user","setUser","password","setPassword","useRive","src","autoplay","stateMachines","rive","RiveComponent","useEffect","setLook","stateSuccess","useStateMachineInput","stateFail","stateHandUp","stateCheck","stateLook","setHangUp","hangUp","value","setCheck","nbChars","parseFloat","split","length","ratio","console","log","lookToSet","Math","round","check","contents","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","style","width","height","Typography","variant","onSubmit","event","preventDefault","data","FormData","currentTarget","email","get","noValidate","mt","autoComplete","TextField","onFocus","onChange","target","margin","required","fullWidth","id","label","name","autoFocus","type","Button","onMouseOver","onClick","fire","mb","Grid","container","item","xs","Link","href","App","className","pass","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f041cd1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.8391ce91.svg\";","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport {createTheme, ThemeProvider} from '@mui/material/styles';\r\nimport {useRive, useStateMachineInput} from 'rive-react';\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst theme = createTheme();\r\n\r\nconst STATE_MACHINE_NAME = \"State Machine 1\";\r\n\r\nexport default function SignIn({checkLogin}) {\r\n\r\n    const [user, setUser] = useState(null);\r\n    const [password, setPassword] = useState(null);\r\n\r\n    const {rive, RiveComponent} = useRive({\r\n        src: \"520-990-teddy-login-screen.riv\",\r\n        autoplay: true,\r\n        stateMachines: STATE_MACHINE_NAME\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        setLook();\r\n    }, [user])\r\n\r\n    const stateSuccess = useStateMachineInput(\r\n        rive,\r\n        STATE_MACHINE_NAME,\r\n        'success'\r\n    )\r\n    const stateFail = useStateMachineInput(\r\n        rive,\r\n        STATE_MACHINE_NAME,\r\n        'fail'\r\n    )\r\n    const stateHandUp = useStateMachineInput(\r\n        rive,\r\n        STATE_MACHINE_NAME,\r\n        'hands_up'\r\n    )\r\n\r\n    const stateCheck = useStateMachineInput(\r\n        rive,\r\n        STATE_MACHINE_NAME,\r\n        'Check'\r\n    )\r\n    const stateLook = useStateMachineInput(\r\n        rive,\r\n        STATE_MACHINE_NAME,\r\n        'Look'\r\n    )\r\n\r\n\r\n    const triggerSuccess = () => {\r\n        stateSuccess && stateSuccess.fire();\r\n    }\r\n    const triggerFail = () => {\r\n        stateFail && stateFail.fire();\r\n    }\r\n\r\n\r\n    const setHangUp = (hangUp) => {\r\n        stateHandUp && (stateHandUp.value = hangUp);\r\n    }\r\n\r\n    const setLook = () => {\r\n        if (!stateLook || !stateCheck || !setHangUp) {\r\n            return;\r\n        }\r\n        setHangUp(false)\r\n        setCheck(true);\r\n        let nbChars = 0;\r\n        if (user) {\r\n            nbChars = parseFloat(user.split('').length);\r\n        }\r\n\r\n        let ratio = nbChars / parseFloat(41);\r\n        console.log(\"ratio \" + ratio);\r\n\r\n        let lookToSet = ratio * 100 - 25\r\n        console.log(\"lookToSet \" + Math.round(lookToSet));\r\n        stateLook.value = Math.round(lookToSet);\r\n    }\r\n    const setCheck = (check) => {\r\n        if (stateCheck) {\r\n            stateCheck.value = check;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    if (rive) {\r\n        console.log(rive.contents);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        // eslint-disable-next-line no-console\r\n        console.log({\r\n            email: data.get('email'),\r\n            password: data.get('password'),\r\n        });\r\n    };\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 8,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <div >\r\n                        <RiveComponent style={{width:'400px', height:'400px'}} src=\"520-990-teddy-login-screen.riv\"/>\r\n                    </div>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign in\r\n                    </Typography>\r\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\r\n                        <form autoComplete=\"off\">\r\n                        <TextField\r\n                            onFocus={() => setHangUp(false)}\r\n\r\n                            onChange={(event) => setUser(event.target.value)}\r\n                            value={user}\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Email Address\"\r\n                            name=\"email\"\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n\r\n                        />\r\n                        <TextField\r\n                            onChange={(event) =>\r\n                            {\r\n                                setHangUp(true);\r\n                                setPassword(event.target.value);\r\n                                //setHangUp(false);\r\n                            }}\r\n                            //onFocus={() => setHangUp(true)}\r\n                            //onE\r\n                            value={password}\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                        />\r\n                        </form>\r\n                        <Button\r\n                            onMouseOver={() => setHangUp(false)}\r\n                            onFocus={() => setHangUp(false)}\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            onClick={() => {\r\n\r\n                                setCheck(true);\r\n                                if (checkLogin(user, password)) {\r\n                                    triggerSuccess()\r\n                                } else {\r\n                                    triggerFail();\r\n                                }\r\n                            }}\r\n                            sx={{ mt: 3, mb: 2 }}\r\n                        >\r\n                            Sign In\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\">\r\n                                    Forgot password?\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link href=\"#\" variant=\"body2\">\r\n                                    {\"Don't have an account? Sign Up\"}\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Box>\r\n                {/*<Copyright sx={{ mt: 8, mb: 4 }} />*/}\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport SignIn from \"./Component/SignIn\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SignIn checkLogin={(user, pass) => {\n            return user === \"user\" && pass === \"password\"\n        }}/>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}